//***************************************************************************
//* LANIOライブラリ ヘッダファイル
//***************************************************************************

#ifdef EXPORT_DECLSPEC
#define DECLSPEC extern "C" __declspec(dllexport) int __stdcall
#else
#define DECLSPEC extern "C" __declspec(dllimport) int __stdcall
#endif

//***************************************************************************
//* 型定義、定数定義
//***************************************************************************

//***************************************************************************
//* LANIOハンドラ
//***************************************************************************
#define hLANIO int

//***************************************************************************
//* LALanioGetLastErrorが返すエラーコード
//***************************************************************************
enum LANIOERROR {
    LALANIOERR_NOINIT = 1,          //* 初期化されていません。LALanioInitを実行してください。
    LALANIOERR_NOLANIO,             //* 検索した結果、LANIOが発見できませんでした。
    LALANIOERR_NOTEXIST,            //* 検索で発見したLANIOより多い値を指定しました。
    LALANIOERR_NOTFOUND,            //* 指定された条件のLANIOを発見できませんでした。
    LALANIOERR_NOCONNECTED,         //* LANIOと接続していません。LALanioConnectを実行してください。
    LALANIOERR_INVALIDOPERATION,    //* 指定された操作は実行できません。
    LALANIOERR_ALREADY_CONNECTED,   //* すでに接続しています。
    LALANIOERR_OVERCONNECTMAX,      //* 接続最大数を超過しました。
    LALANIOERR_INVALIDRETURNVALUE,  //* 不正な戻り値が返りました。
};

//***************************************************************************
//* LALanioGetModelで取得するLANIOモデル
//***************************************************************************
enum LANIOMODEL {
    NOTLANIO = 0,
    LA2R3A   = 8,
    LA2A3P   = 9,
    LA2R3AV2 = 10,
    LA3A2P   = 11,
    LA5AI    = 12,
    NO_GETMODEL = -1,
};

//***************************************************************************
//* 設定定数
//***************************************************************************
enum LANIO_AI_RANGE {
    LALANIO_AI_RANGE_100mV          = 0,
    LALANIO_AI_RANGE_1V             = 1,
    LALANIO_AI_RANGE_10V            = 2,
    LALANIO_AI_RANGE_30V            = 3,
    LALANIO_AI_RANGE_20mA_250orm    = 4,
    LALANIO_AI_RANGE_20mA_50orm     = 5,
    LALANIO_AI_RANGE_TC             = 6,
};

enum LALANIO_AI_TRANSMITCYCLE {
    LALANIO_AI_TRANSMITCYCLE_0_05sec = 0,
    LALANIO_AI_TRANSMITCYCLE_0_1sec  = 1,
    LALANIO_AI_TRANSMITCYCLE_0_2sec  = 2,
    LALANIO_AI_TRANSMITCYCLE_0_5sec  = 3,
    LALANIO_AI_TRANSMITCYCLE_1sec    = 4,
    LALANIO_AI_TRANSMITCYCLE_2sec    = 5,
    LALANIO_AI_TRANSMITCYCLE_5sec    = 6,
    LALANIO_AI_TRANSMITCYCLE_10sec   = 7,
    LALANIO_AI_TRANSMITCYCLE_20sec   = 8,
    LALANIO_AI_TRANSMITCYCLE_30sec   = 9,
    LALANIO_AI_TRANSMITCYCLE_1min    = 10,
    LALANIO_AI_TRANSMITCYCLE_2min    = 11,
    LALANIO_AI_TRANSMITCYCLE_5min    = 12,
    LALANIO_AI_TRANSMITCYCLE_10min   = 13,
};

enum LALANIO_AO_RANGE {
    LALANIO_AO_RANGE_10V             = 0,
    LALANIO_AO_RANGE_20mA            = 1,
};

//***************************************************************************
//* 初期化、終了、エラー取得関数
//***************************************************************************

//***************************************************************************
//*     LANIOライブラリを初期化します。
//***************************************************************************
DECLSPEC LALanioInit();

//***************************************************************************
//*     LANIOライブラリの使用を終了します。
//***************************************************************************
DECLSPEC LALanioEnd();

//***************************************************************************
//*     直前に発生したエラー番号を取得します。
//*     戻り値 : エラーの情報を返します
//***************************************************************************
DECLSPEC LALanioGetLastError();

//***************************************************************************
//* LANIO検索関数
//***************************************************************************

//***************************************************************************
//*     自動的にLANIOのIDとModelを取得する機能についての設定をします。
//*     引数   : enable  この機能を使用する場合はTRUE(1)、しない場合はFALSE(0)
//*              port    IDとModelを自動取得するシリアルのポート番号
//***************************************************************************
DECLSPEC LALanioSetAutoRequestIdModel(BOOL enable, int port);

//***************************************************************************
//*     LAN内にあるLANIOを検索します。
//*     引数   : msec    タイムアウト時間（単位 m秒）
//*     戻り値 : 発見したLANIOの数。発見できなかった場合は0。エラー時は-1
//***************************************************************************
DECLSPEC LALanioSearch(int msec = 100);

//***************************************************************************
//* LANIO情報取得関数
//***************************************************************************

//***************************************************************************
//*     検索したLANIOのIPアドレスを取得します。
//*     引数   : lanio       LANIO番号
//*              ipaddress   IPアドレスを取得するバッファへのポインタ(16byte必要)
//***************************************************************************
DECLSPEC LALanioGetIpAddress(int lanio, char *ipaddress);

//***************************************************************************
//*     検索したLANIOのMACアドレスを取得します。
//*     引数   : lanio       LANIO番号
//*              macaddress  MACアドレスを取得するバッファへのポインタ(6byte必要)
//***************************************************************************
DECLSPEC LALanioGetMacAddress(int lanio, unsigned char *macaddress);

//***************************************************************************
//*     LANIOのID番号を取得します。
//*     引数   : lanio   LANIO番号
//*              id      LANIOのIDを取得するバッファへのポインタ
//***************************************************************************
DECLSPEC LALanioGetId(int lanio, int *id);

//***************************************************************************
//*     LANIOのモデルを取得します。
//*     引数   : lanio   LANIO番号
//*              model   LANIOのモデルを取得するバッファへのポインタ
//***************************************************************************
DECLSPEC LALanioGetModel(int lanio, int *model);

//***************************************************************************
//*     検索したLANIOに対してIDとモデル番号を質問します。
//*     引数   : lanio   LANIO番号
//*              id      LANIOのIDを取得するバッファへのポインタ
//*              model   LANIOのモデルを取得するバッファへのポインタ
//***************************************************************************
DECLSPEC LALanioRequestIdModel(int lanio, int *id, int *model);

//***************************************************************************
//* LANIO接続関数
//***************************************************************************

//***************************************************************************
//*     LALanioSearchによって発見された順番を指定して接続します。
//*     引数   : lanio   LANIO番号
//*     戻り値 : エラー時は-1、正常終了時はLANIO操作ハンドルを返します
//***************************************************************************
DECLSPEC LALanioConnect(int lanio);

//***************************************************************************
//*     IDとモデルを指定して接続します。
//*     引数   : id      LANIOのID番号
//*              model   LANIOのモデル
//*     戻り値 : エラー時は-1、正常終了時はLANIO操作ハンドルを返します
//***************************************************************************
DECLSPEC LALanioConnectByIdModel(int id, int model);

//***************************************************************************
//*     IPアドレスを指定して接続します。
//*     引数   : ipaddress   IPアドレス文字列バッファへのポインタ
//*     戻り値 : エラー時は-1、正常終了時はLANIO操作ハンドルを返します
//***************************************************************************
DECLSPEC LALanioConnectByIpAddress(char *ipaddress);

//***************************************************************************
//*     MACアドレスを指定して接続します。
//*     引数   : macaddress  MACアドレスバッファへのポインタ
//*     戻り値 : エラー時は-1、正常終了時はLANIO操作ハンドルを返します
//***************************************************************************
DECLSPEC LALanioConnectByMacAddress(unsigned char *macaddress);

//***************************************************************************
//*     IPアドレスもしくはURLを指定して接続します。
//*     引数   : address IPアドレスまたはurl文字列バッファへのポインタ
//*              msec    タイムアウト時間（単位 m秒）
//*     戻り値 : エラー時は-1、正常終了時はLANIO操作ハンドルを返します
//***************************************************************************
DECLSPEC LALanioConnectDirect(char *address, int msec = 1000);

//***************************************************************************
//*     IPアドレスもしくはURL、ポート番号を指定して接続します。接続時にUDPを使用しません。
//*     引数   : address    IPアドレスまたはurl文字列バッファへのポインタ
//*              msec       タイムアウト時間（単位 m秒）
//*              serialport ポート番号
//*     戻り値 : エラー時は-1、正常終了時はLANIO操作ハンドルを返します
//***************************************************************************
DECLSPEC LALanioConnectDirect2(char *address, int msec, int serialport);

//***************************************************************************
//* LANIO切断関数
//***************************************************************************

//***************************************************************************
//*     LANIOとの接続を切断します。
//*     引数   : handle  LANIO操作ハンドル
//***************************************************************************
DECLSPEC LALanioClose(hLANIO handle);

//***************************************************************************
//* 入出力関数
//***************************************************************************

//***************************************************************************
//*     LANIOのDOを操作します。全てのDOに対し一斉に操作します。
//*     引数   : handle  LANIO操作ハンドル
//*              signal  DOポートの設定。最下位ビットからDO1、DO2...に対応します
//***************************************************************************
DECLSPEC LALanioDO(hLANIO handle, int signal);

//***************************************************************************
//*     LANIOの現在のDO状態を取得します。全てのDOに対し一斉に取得します。
//*     引数   : handle  LANIO操作ハンドル
//*              signal  DOポートの内容が入るバッファへのポインタ
//*                      最下位ビットからDO1、DO2...
//***************************************************************************
DECLSPEC LALanioGetDO(hLANIO handle, int *signal);

//***************************************************************************
//*     LANIOのDIを取得します。全てのDIに対し一斉に取得します。
//*     引数   : handle  LANIO操作ハンドル
//*              signal  DIポートの内容が入るバッファへのポインタ
//*                      最下位ビットからDI1、DI2...
//***************************************************************************
DECLSPEC LALanioDI(hLANIO handle, int *signal);

//***************************************************************************
//*     LANIOのAOから電圧を出力します
//*     引数   : handle  LANIO操作ハンドル
//*              ch      チャンネルを指定します。 0:AO1 1:AO2 ...
//*              val     出力値を指定します。
//***************************************************************************
DECLSPEC LALanioAOVoltage(hLANIO handle, int ch, int val);

//***************************************************************************
//*     LANIOのAOから電流を出力します
//*     引数   : handle  LANIO操作ハンドル
//*              ch      チャンネルを指定します。 0:AO1 1:AO2 ...
//*              val     出力値を指定します。
//***************************************************************************
DECLSPEC LALanioAOAmpere(hLANIO handle, int ch, int val);

//***************************************************************************
//*     LANIOのAOから電圧・電流を出力します
//*     引数   : handle   LANIO操作ハンドル
//*              ch_count 出力するチャンネル数を指定します
//*              ch       出力するチャンネルが入った配列を指定します 0:AO1 1:AO2 ...
//*              range    出力する電圧/電流が入った配列を指定します 0:電圧 1:電流
//*              val      出力値を指定します。
//***************************************************************************
DECLSPEC LALanioAOMulti(hLANIO xport, int ch_count, int *ch, int *range, int *val);

//***************************************************************************
//*     LANIOのAOの初期値を設定します
//*     引数   : handle  LANIO操作ハンドル
//*              ch      チャンネルを指定します。 0:AO1 1:AO2 ...
//*              range   電圧/電流を指定します 0:電圧 1:電流
//*              val     出力値を指定します。
//***************************************************************************
DECLSPEC LALanioSetInitialAO(hLANIO handle, int ch, int range, int val);

//***************************************************************************
//*     LANIOのAOの出力値を取得します
//*     引数   : handle  LANIO操作ハンドル
//*              ch      チャンネルを指定します。 0:AO1 1:AO2 ...
//*              range   電圧/電流が入るバッファへのポインタ 0:電圧 1:電流
//*              val     出力値が入るバッファへのポインタ
//***************************************************************************
DECLSPEC LALanioGetAO(hLANIO handle, int ch, int *range, int *val);

//***************************************************************************
//*     LANIOのAIから入力します
//*     引数   : handle  LANIO操作ハンドル
//*              ch      チャンネルを指定します。 0:AI1 1:AI2 ...
//*              val     入力値が入るバッファへのポインタ
//***************************************************************************
DECLSPEC LALanioAI(hLANIO handle, int ch, int *val);

//***************************************************************************
//*     LANIOのAI全チャンネルから入力します
//*     引数   : handle  LANIO操作ハンドル
//*              val     入力値が入るバッファへのポインタ
//***************************************************************************
DECLSPEC LALanioAIAll(hLANIO handle, int *val);

//***************************************************************************
//*     LANIOのAIのレンジを設定します
//*     引数   : handle  LANIO操作ハンドル
//*              ch      チャンネルを指定します。 0:AI1 1:AI2 ...
//*              range   レンジ設定
//*                      0:100mV  1:1V  2:10V  3:30V  4:20mA(250Ω)  5:20mA(50Ω)  6:熱電対
//***************************************************************************
DECLSPEC LALanioSetAIRange(hLANIO handle, int ch, int range);

//***************************************************************************
//*     LANIOのAIの設定を取得します
//*     引数   : handle        LANIO操作ハンドル
//*              ch            チャンネルを指定します。 0:AI1 1:AI2 ...
//*              range         レンジ設定が入るバッファへのポインタ
//*                            0:100mV  1:1V  2:10V  3:30V  4:20mA(250Ω)  5:20mA(50Ω)  6:熱電対
//*              transmitcycle 周期転送サイクルが入るバッファへのポインタ 
//*                            0:0.05sec  1:0.1sec  2:0.2sec  3:0.5sec
//*                            4:1sec  5:2sec  6:5sec  7:10sec  8:20sec  9:30sec
//*                            10:1min  11:2min  12:5min  13:10min
//***************************************************************************
DECLSPEC LALanioGetAISetting(hLANIO handle, int ch, int *range, int *transmitcycle);

//***************************************************************************
//*     LANIOのADコンバータ変換速度を設定します
//*     引数   : handle  LANIO操作ハンドル
//*              speed   変換速度
//*                      0 10sps      1 16.6sps    2 50sps      3 60sps
//*                      4 400sps     5 1200sps    6 3600sps    7 14400sps
//***************************************************************************
DECLSPEC LALanioSetADCsps(hLANIO handle, int speed);

//***************************************************************************
//*     LANIOのADコンバータ変換速度を取得します
//*     引数   : handle  LANIO操作ハンドル
//*              speed   変換速度が入るバッファへのポインタ
//*                      0 10sps      1 16.6sps    2 50sps      3 60sps
//*                      4 400sps     5 1200sps    6 3600sps    7 14400sps
//***************************************************************************
DECLSPEC LALanioGetADCsps(hLANIO handle, int *speed);

//***************************************************************************
//*     LANIOのAIの周期転送速度を設定します
//*     引数   : handle        LANIO操作ハンドル
//*              transmitcycle 周期転送サイクルが入るバッファへのポインタ 
//*                            0:0.05sec  1:0.1sec  2:0.2sec  3:0.5sec
//*                            4:1sec  5:2sec  6:5sec  7:10sec  8:20sec  9:30sec
//*                            10:1min  11:2min  12:5min  13:10min
//***************************************************************************
DECLSPEC LALanioSetCyclicTransmit(hLANIO handle, int transmitcycle);

//***************************************************************************
//*     LANIOのAIの周期転送を開始します
//*     引数   : handle   LANIO操作ハンドル
//*              CallBack データが周期転送されるコールバック関数
//*              User     コールバック関数が呼ばれる特に指定できるユーザデータ
//***************************************************************************
DECLSPEC LALanioStartCyclicTransmit(hLANIO handle, void *CallBack, void *User);

//***************************************************************************
//*     LANIOのAIの周期転送を終了します
//*     引数   : handle   LANIO操作ハンドル
//***************************************************************************
DECLSPEC LALanioStopCyclicTransmit(hLANIO handle);

//***************************************************************************
//*     LANIOのLED点灯閾値を設定します
//*     引数   : handle  LANIO操作ハンドル
//*              ch      チャンネルを指定します。 0:A*1 1:A*2 ...
//*              led     0:指定した範囲内でLED点灯 1:範囲外でLED点灯
//*              lthd    閾値下限
//*              hthd    閾値上限
//***************************************************************************
DECLSPEC LALanioSetThreshold(hLANIO handle, int ch, int led, int lthd, int hthd);

//***************************************************************************
//*     LANIOのLED点灯閾値を取得します
//*     引数   : handle  LANIO操作ハンドル
//*              ch      チャンネルを指定します。 0:A*1 1:A*2 ...
//*              led     0:指定した範囲内でLED点灯 1:範囲外でLED点灯
//*              lthd    閾値下限が入るバッファへのポインタ
//*              hthd    閾値上限が入るバッファへのポインタ
//***************************************************************************
DECLSPEC LALanioGetThreshold(hLANIO handle, int ch, int *led, int *lthd, int *hthd);

//***************************************************************************
//*     LANIOの熱電対測定を設定します
//*     引数   : handle  LANIO操作ハンドル
//*              ch      チャンネルを指定します。 0:AI1 1:AI2 ...
//*              tc_type 熱電対のタイプを指定
//*                      0:K 1:J 2:T 3:E 4:N 5:R 6:S 7:B
//*              j       1で冷接点補償有効
//*              bd      1で断線検知有効
//*              bf      断線検知時の測定値 0:800000 1:7FFFFF
//***************************************************************************
DECLSPEC LALanioSetTC(hLANIO handle, int ch, int tc_type, int j, int bd, int bf);

//***************************************************************************
//*     LANIOの熱電対対向出力を設定します
//*     引数   : handle         LANIO操作ハンドル
//*              ch             チャンネルを指定します。 0:AI1 1:AI2 ...
//*              range          対向出力レンジ
//*                             0:0-10V 1:0-5V 2:1-5V 3:4-20mA
//*              scale_lowest   スケール下限設定
//*              scale_highest  スケール上限設定
//***************************************************************************
DECLSPEC LALanioSetTCnotice(hLANIO handle, int ch, int range, int scale_lowest, int scale_highest);

//***************************************************************************
//*     LANIOの熱電対測定を設定を取得します
//*     引数   : handle  LANIO操作ハンドル
//*              ch             チャンネルを指定します。 0:AI1 1:AI2 ...
//*              tc_type        熱電対のタイプを指定
//*                             0:K 1:J 2:T 3:E 4:N 5:R 6:S 7:B
//*              j              1で冷接点補償有効
//*              bd             1で断線検知有効
//*              bf             断線検知時の測定値 0:800000 1:7FFFFF
//*              range          対向出力レンジ
//*                             0:0-10V 1:0-5V 2:1-5V 3:4-20mA
//*              scale_lowest   スケール下限設定
//*              scale_highest  スケール上限設定
//***************************************************************************
DECLSPEC LALanioGetTC(hLANIO handle, int ch, int *tc_type, int *j, int *bd, int *bf, int *range, int *scale_lowest, int *scale_highest);

//***************************************************************************
//*     DOアラートを設定します
//*     引数   : handle  LANIO操作ハンドル
//*              do_ch   チャンネルを指定します。 0:DO1 1:DO2 ...
//*              ai_ch   判定入力チャンネルを指定します。 0:AI1 1:AI2 ...
//*              hd      ヒステリシス方向指定 0:LED消灯領域優先 1:LED点灯領域優先
//*              width   ヒステリシス幅
//***************************************************************************
DECLSPEC LALanioSetDOAlart(hLANIO handle, int do_ch, int ai_ch, int hd, int width);

//***************************************************************************
//*     DOアラート開始/停止を設定します
//*     引数   : handle  LANIO操作ハンドル
//*              do_ch   チャンネルを指定します。 0:DO1 1:DO2 ...
//*              start   0で停止 1で開始
//***************************************************************************
DECLSPEC LALanioStartStopDOAlart(hLANIO handle, int do_ch, int start);

//***************************************************************************
//*     DOアラート設定を取得します
//*     引数   : handle  LANIO操作ハンドル
//*              do_ch   チャンネルを指定します。 0:DO1 1:DO2 ...
//*              start   0で停止 1で開始
//*              ai_ch   判定入力チャンネルを指定します。 0:AI1 1:AI2 ...
//*              hd      ヒステリシス方向指定 0:LED消灯領域優先 1:LED点灯領域優先
//*              width   ヒステリシス幅
//***************************************************************************
DECLSPEC LALanioGetDOAlart(hLANIO handle, int do_ch, int *start, int *ai_ch, int *hd, int *width);
